schema {
  query: Query
}

type Query {
  getInvoiceList(input: ListInfoInput!): InvoiceList
  getInvoice(input: InvoiceIdentifierInput!): Invoice
  getClientList(input: ListInfoInput!): ClientList
  getClient(input: ClientIdentifierInput!): Client
  getServiceItemList(input: ListInfoInput!): ServiceItemList
  getServiceItem(input: ServiceItemIdentifierInput!) : ServiceItem
  getServiceCategoryList: [ServiceCategory]
  getTicket(input: TicketIdentifierInput!): Ticket
  getTicketList(input: ListInfoInput!): TicketList
}

input ListInfoInput {
  page: Int
  pageSize: Int
  condition: RuleConditionInput
  sort: [SortInput]
}

input RuleConditionInput {
  attribute: String
  operator: String
  value: JSON
}

scalar JSON

input SortInput {
  attribute: String
  order: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

type ClientList{
  clients: [Client]
  listInfo: ListInfo

}

input ClientIdentifierInput
{
  accountId: ID!
}

type Client {
  accountId: ID!
  name: String!
  stage: String!
  status: String
  emailDomains: [String]
  accountManager: JSON
  primaryContact: JSON
  secondaryContact: JSON
  hqSite: JSON
  technicianGroups: JSON
  customFields: JSON
}

type InvoiceList {
  invoices: [Invoice]
  listInfo: ListInfo
}

type Invoice
{
  invoiceId: ID!
  displayId: String
  client: JSON
  site: JSON
  invoiceDate: String!
  dueDate: String
  statusEnum: InvoiceStatus
  sentToClient: Boolean
  items: [InvoiceItem]
  taxes: [InvoiceTaxItem]
  discountAmount: String
  additionalDiscount: String
  additionalDiscountRate: String
  totalAmount: String
  notes: String
  paymentDate: String
  paymentMethod: JSON
  paymentReference: String
  invoicePaymentTerm: JSON
}

input InvoiceIdentifierInput
{
  invoiceId: ID!
}

type InvoiceItem
{
  itemId: ID!,
  billedDate: String!
  details: String
  quantity: String!
  unitPrice: String!
  discountRate: String
  amount: String
  taxable: Boolean
  tax: JSON
  serviceItem: JSON
  taxAmount: String
  totalAmount: String
  invoice: Invoice
}

enum InvoiceStatus {
  DRAFT
  APPROVED
  PAID
  OVERDUE
  VOID
}

type InvoiceTaxItem
{
  tax: JSON!
  taxRate: String!
  taxableAmount: String!
  taxAmount: String!
  id: ID!
  rate: JSON!
}

type ListInfo
{
  page: Int
  pageSize: Int
  sort: [Sort]
  condition: JSON
  hasMore: Boolean
  totalCount: Int
}
type Sort
{
  attribute: String
  order: SortOrder
}

type ServiceItemList
{
  items: [ServiceItem]
  listInfo: ListInfo
}


input ServiceItemIdentifierInput
{
  itemId: ID!
}

type ServiceItem
{
  itemId: ID!,
  name: String!,
  description: String
  quantityType: ServiceItemQuantityType!
  category: ServiceCategory
  useAsWorklogItem: Boolean
  unitPrice: String
  businessHoursUnitPrice: String
  afterHoursUnitPrice: String
  roundUpValue: Int
  quantity: String
  amount: String
  adjustBlockItemAgainstAllItems: Boolean
  blockItemAdjustedItems: [ServiceItem]
  blockItemUsedIn: BLOCK_ITEM_USAGE_TYPE
  salesTaxEnabled: Boolean
  salesTax: Tax
}

enum  BLOCK_ITEM_USAGE_TYPE
{
  ALL_HOURS
  BUSINESS_HOURS
}

enum ServiceItemQuantityType
{
  UNITS
  HOURS
  BLOCK_HOURS
  BLOCK_MONEY
}

type ServiceCategory
{
  categoryId: ID!
  name: String!
}

type Tax
{
  taxId: ID!
  name: String!
  rates: [TaxRate]
  totalRate: String
}

type TaxRate
{
  rateId: ID!
  name: String!
  rateValue: String!
}

input TicketIdentifierInput
{
  ticketId: ID!
}

type TicketList
{
  tickets: [Ticket]
  listInfo: ListInfo
}

type Ticket
{
  ticketId: ID!
  displayId: String!
  subject: String!
  ticketType: TicketType!
  source: TicketSource!
  client: JSON
  site: JSON
  requester: JSON
  additionalRequester: JSON
  followers: JSON
  techGroup: JSON
  technician: JSON
  status: String
  priority: String
  impact: String
  urgency: String
  category: String
  subcategory: String
  cause: String
  subcause: String
  resolutionCode: String
  sla: JSON
  createdTime: String
  updatedTime: String
  firstResponseDueTime: String
  firstResponseTime: String
  firstResponseViolated: Boolean
  resolutionDueTime: String
  resolutionTime: String
  resolutionViolated: Boolean
  customFields: JSON
}

enum TicketType
{
  INCIDENT
  SERVICE_REQUEST
}

enum TicketSource
{
  FORM
  AGENT
  EMAIL
  AI
  PHONE
  INTEGRATION
}
